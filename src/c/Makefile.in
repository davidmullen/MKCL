#
#  Makefile for MKCL core library
#
#  Copyright (c) 2010-2018,2021, Jean-Claude Beaudoin.
#  Copyright by a number of previous anonymous authors
#            presumed to be the same as for the rest of MKCL.
#
#  MKCL is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 3 of the License, or (at your option) any later version.
#
#  See file '../../Copyright' for full details.
#
#
top_srcdir= @top_srcdir@
srcdir	= @srcdir@
VPATH	= @srcdir@

# Programs used by "make":
#
TRUE_CC = @CC@
CC	= @CC@
ifeq (@thehost@,mingw32)
CFLAGS	= -I$$PWD -DMKCL_API @CPPFLAGS@ @CFLAGS@ @MKCL_CFLAGS@ @MKCL_OPTIM_CFLAGS@
else
CFLAGS	= -I$$PWD @CPPFLAGS@ @CFLAGS@ @MKCL_CFLAGS@ @MKCL_OPTIM_CFLAGS@
endif

SHELL	= /bin/sh
RM	= @RM@
EXE	= @EXEEXT@
DPP	= ./dpp$(EXE)
RANLIB	= @RANLIB@

# Data for installation
#
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
prefix=@prefix@
exec_prefix=@exec_prefix@
libdir=@libdir@
includedir=@includedir@
mkcldir=@mkcldir@

# Files

MKCL_HFILES = mkcl/config.h \
              mkcl/list.h \
              mkcl/external.h \
              mkcl/internal.h \
              mkcl/mkcl-fenv.h \
              mkcl/mkcl-gc.h \
              mkcl/mkcl-inl.h \
              mkcl/mkcl-math.h \
              mkcl/mkcl-unicode.h \
              mkcl/number.h \
              mkcl/object.h \
              mkcl/stacks.h

C_EXPORTED_SYMBOLS_H_IN_MKCL =  mkcl/C_exported_symbols_in_CL.h \
                                mkcl/C_exported_symbols_in_CLOS.h \
                                mkcl/C_exported_symbols_in_GRAY.h \
                                mkcl/C_exported_symbols_in_KEYWORDS.h \
                                mkcl/C_exported_symbols_in_MKCL.h \
                                mkcl/C_exported_symbols_in_MT.h \
                                mkcl/C_exported_symbols_in_SI.h


OBJS	= main.o symbol.o package.o list.o \
	apply.o eval.o interpreter.o compiler.o disassembler.o \
	instance.o gfun.o reference.o character.o \
	file.o read.o print.o error.o string.o cfun.o \
	typespec.o assignment.o \
	predicate.o number.o \
	num_pred.o num_comp.o num_arith.o num_sfun.o num_co.o \
	num_log.o num_rand.o array.o sequence.o cmpaux.o \
	macros.o backq.o stacks.o \
	time.o unixint.o \
	mapfun.o multival.o hash.o format.o pathname.o \
	structure.o load.o unixfsys.o unixsys.o \
	unicode.o \
	ffi.o @EXTRA_OBJS@

DCFILES = $(OBJS:%.o=%.c)


.SUFFIXES: .c .o .dh
.PHONY: all all2

all:
	$(MAKE) GNUmakefile; $(MAKE) -f GNUmakefile all2

all2: ../mkclmin.a ../mkcltop.a all_symbols.o all_symbols2.o cinit.o

.c.s:
	$(CC) $(CFLAGS) -fverbose-asm -S -o $@ -c $<

.c.o:
	$(CC) $(CFLAGS) -o $@ -c $<

.dh.h:
	$(DPP) $< $@


$(C_EXPORTED_SYMBOLS_H_IN_MKCL): $(DPP)

mkcl/gc/gc.h: ../gc/include/gc.h
	mkdir -p mkcl/gc
	cp -p ../gc/include/*.h mkcl/gc

mkcl/mkcl-gc.h: mkcl/gc/gc.h
	touch $@

mkcl/internal.h: $(C_EXPORTED_SYMBOLS_H_IN_MKCL)

# This one was put out to pasture a long time ago.
#apply_x86.c: arch/apply_x86.d $(DPP)
#	$(DPP) $< $@


../mkclmin.a: GNUmakefile $(OBJS)
	$(RM) $@
	$(AR) cr $@ $(OBJS)
	$(RANLIB) $@

../mkcltop.a: GNUmakefile all_symbols2.o
	$(RM) $@
	$(AR) cr $@ all_symbols2.o
	$(RANLIB) $@

clean:
	$(RM) $(OBJS) $(OBJS:%.o=%.s) all_symbols.o all_symbols2.o cinit.o core core.* a.out
	$(RM) mkcl/gc/*.h $(C_EXPORTED_SYMBOLS_H_IN_MKCL)

distclean: clean
	$(RM) $(DPP) # $(DCFILES)
	$(RM) symbols_list2.h # all_symbols.c cinit.c
	$(RM) GNUmakefile makefile.depend
	$(RM) Makefile

realclean: distclean
	$(RM) *~ arch/*~

# Build rules

$(DPP): dpp.c symbols_list2.h
	$(TRUE_CC) -O2 dpp.c  -o $@

symbols_list2.h: symbols_list.h
	cpp -DDPP -DMKCL_FINAL symbols_list.h | \
	sed -e 's%{{\([A-Z ]*.*".*"\),[^,]*,[ ]*NULL,.*}}%{\1,NULL,-1}%g' \
	    -e 's%{{\([A-Z ]*.*".*"\),[^,]*,[ ]*\([^,]*\),[ ]*\([^,]*\),.*}}%{\1,"\2",\3}%g' \
	    -e 's%{{NULL.*%{NULL,NULL,-1}};%' > $@-$$$$; \
	mv $@-$$$$ $@ # We do this here to assure the "atomic" creation of symbols_list2.h.

$(OBJS): $(DPP)


unixfsys.o: unixfsys.c
	$(CC) $(CFLAGS) -DMKCL_SYS_LIBDIR_DEFAULT="\"$(mkcldir)\"" -o $@ -c $<


#
# GCC might break this code
#

arch/ffi_x86.o: arch/ffi_x86.c
	$(CC) $(CFLAGS) -O0 -c arch/ffi_x86.c -o $@


#
# These files are interrelated
#
all_symbols.o: GNUmakefile all_symbols.c symbols_list.h symbols_list2.h mkcl/mkcl.h
	$(CC) $(CFLAGS) -c all_symbols.c -o $@

all_symbols2.o: GNUmakefile all_symbols.c symbols_list.h symbols_list2.h mkcl/mkcl.h
	$(CC) $(CFLAGS) -DMKCL_FINAL -c all_symbols.c -o $@

cinit.o: GNUmakefile cinit.c
	$(CC) $(CFLAGS) -c cinit.c -o $@


Makefile: Makefile.in ../config.status
	cd ..; ./config.status

#
#

makefile.depend: $(DCFILES) *.h arch/*.c cinit.c all_symbols.c mkcl/mkcl.h $(MKCL_HFILES)
	$(RM) makefile.depend
	for i in $^; do \
	  case $$i in \
	  *.h) ;; \
	  *.c) $(CC) -MM $(CFLAGS) $${i} >> makefile.depend;; \
	  *) ;; \
	  esac; \
	done


GNUmakefile: Makefile makefile.depend
	file=.GNUmakefile-$$$$; cat Makefile makefile.depend > $$file; \
	mv $$file GNUmakefile # We do this here to assure the "atomic" creation of GNUmakefile.




#
# End of Makefile.
#
#================================================
#

